(1) return 0
	lua-5.2.0 fixed


GetUnmanagedSize
...
+			else if (t == typeof(lua_Number))
+				return 8;



(2) log
	lua-5.2.0 fixed

		static void print_version() {
		  Lua.luai_writestring(Lua.LUA_COPYRIGHT, (uint)Lua.strlen(Lua.LUA_COPYRIGHT)); //FIXME:changed, (uint)
		  Lua.luai_writeline();
+		  Lua.WriteLog(">>>>print_version");
		}
		

		static int loadline(Lua.lua_State L) {
			int status;
			Lua.lua_settop(L, 0);
			if (pushline(L, 1)==0)
				return -1;  /* no input */
			for (;;) {  /* repeat until gets a complete line */
			    uint l;
			    Lua.CharPtr line = Lua.lua_tolstring(L, 1, out l);
+			    Lua.WriteLog(line.ToString());



+		public static void WriteLog(string strLog)
		{
		  	string sFileName = "log_" + DateTime.Now.ToString("yyyy-MM-dd") + ".log";
		  	FileMode mode = File.Exists(sFileName) ? FileMode.Append : FileMode.Create;
		  	using (FileStream fs = new FileStream(sFileName, mode, FileAccess.Write))
		  	{
		  		using (StreamWriter sw = new StreamWriter(fs))
		  		{
			  		sw.WriteLine(DateTime.Now.ToString("yyyy-MM-dd HH-mm-ss") + "   ---   " + strLog);
		  		}
		  	}
		}

(3) a = "hello"..nil
	a = ""..nil
	lua-5.2.0 pending
	dotty dotty not work, not LUAI_THROW (LuaException)
	luaL_traceback throw exception (see (6))
	
(4)
#if CATCH_EXCEPTIONS
	lua-5.2.0 fixed
          catch (Exception e)
		  {
+          	  Debug.Assert(e is LuaException, "Exception isn't LuaException");
          	  Debug.WriteLine(e); //FIXME:added for debug

	
(5) retun a
	lua-5.2.0 fixed
	dotty dotty not work
	
			public void Write(int type, byte[] buffer, int offset, int count)
			{
				if (type == TYPE_STDOUT)
->
			public void Write(int type, byte[] buffer, int offset, int count)
			{
				if (type == TYPE_STDOUT || type == TYPE_STDERR)
...				

					if (str.Length > 0)
					{
--->						if (type == TYPE_STDOUT)
						{
							UnityEngine.Debug.Log(str);
						}
						else if (type == TYPE_STDERR)
						{
							UnityEngine.Debug.LogError(str);
						}
					}
#else
--->				if (type == TYPE_STDOUT)
					{
						stdout_.Write(buffer, offset, count);
					}
					else if (type == TYPE_STDERR)
					{
						stderr_.Write(buffer, offset, count);
					}					
#endif


(6) exception no traceback ("stack traceback:")
	luaL_traceback throw exception
	lua-5.2.0 fixed

solve:
	base_ci[0] -> base_ci

	becuase base_ci is from new CallInfo(), not from luaM_realloc_, so don't use base_ci[0]
>>>>>>>>>>>>>>>>>>>>>>	TODO:add detect code for 'values is null' error

------------------
error:

		public class CallInfo : ArrayElement
		{
			private CallInfo[] values = null;
			private int index = -1;

			public void set_index(int index)
			{
				this.index = index;
			}

			public void set_array(object array)
			{
				this.values = (CallInfo[])array;
				Debug.Assert(this.values != null);
			}

			public CallInfo this[int offset]
			{
values is null --->				get { return values[index+offset]; }
			}




	
(x)(7) seem not bug ??? 
	static Lua.CharPtr progname = LUA_PROGNAME; // <---------------progname is null
	lua-5.2.0 fixed(???)


(8) sharpdevelop x86 arch
	lua-5.2.0 pending


(9) no >> prompt

example:
Lua 5.2.0  Copyright (C) 1994-2011 Lua.org, PUC-Rio
> print("hello
stdin:1: unfinished string near '"hello'

	lua-5.2.0 pending
		static Lua.CharPtr get_prompt(Lua.lua_State L, int firstline) {
			Lua.CharPtr p;
			Lua.lua_getglobal(L, (firstline!=0) ? "_PROMPT" : "_PROMPT2");
			p = Lua.lua_tostring(L, -1);
------>			if (p == null) p = ((firstline!=0) ? LUA_PROMPT : LUA_PROMPT2);
			Lua.lua_pop(L, 1);  /* remove global */
			return p;
		}
		static int incomplete(Lua.lua_State L, int status) {
			if (status == Lua.LUA_ERRSYNTAX) {
				uint lmsg;
				Lua.CharPtr msg = Lua.lua_tolstring(L, -1, out lmsg);
				if (lmsg >= marklen && Lua.strcmp(msg + lmsg - marklen, EOFMARK) == 0) {
not enter---->					Lua.lua_pop(L, 1);
					return 1;
				}
			}
			return 0;  /* else... */
		}
