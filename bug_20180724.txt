* run scimark.lua faild  
Lua.exe: scimark.lua:95: malformed number near '0x7fffffff'
https://github.com/weimingtom/KuukoBack/blob/master/kuuko/test/scimark/scimark.lua  


solve:

(a)
llimits.h

-        public static byte cast_uchar(object i) { return (byte)(i); } //FIXME:???remove?
+		public static byte cast_uchar(object i) { 
+			if (i is char) 
+			{
+				return (byte)(((char)i) & 0xff);
+			}
+			else
+			{
+				return (byte)((int)i & 0xff);
+			}
+		} //FIXME:???remove?

----------->>>>>

		public static byte cast_uchar(object i) { 
			if (i is char) 
			{
				return (byte)(((char)i) & 0xff);
			}
			else
			{
				return (byte)((int)i & 0xff);
			}
		} //FIXME:???remove?


(b)
lobject.c

	}
 
 
-		//#if !defined(lua_strx2number)
+//		#if !defined(lua_strx2number)
 
-		//#include <math.h>
+//		#include <math.h>
 
 
-		//private static int isneg (const char **s) {
-		//  if (**s == '-') { (*s)++; return 1; }
-		//  else if (**s == '+') (*s)++;
-		//  return 0;
-		//}
+		private static int isneg (ref CharPtr s) {
+		  if (s[0] == '-') { s.inc(); return 1; }
+		  else if (s[0] == '+') s.inc();
+		  return 0;
+		}
 
 
-		//private static lua_Number readhexa (const char **s, lua_Number r, int *count) {
-		//  for (; lisxdigit(cast_uchar(**s)); (*s)++) {  /* read integer part */
-		//    r = (r * 16.0) + cast_num(luaO_hexavalue(cast_uchar(**s)));
-		//    (*count)++;
-		//  }
-		//  return r;
-		//}
+		private static lua_Number readhexa (ref CharPtr s, lua_Number r, ref int count) {
+		  for (; lisxdigit(cast_uchar(s[0])) != 0; s.inc()) {  /* read integer part */
+			r = (r * 16.0) + cast_num(luaO_hexavalue(cast_uchar(s[0])));
+		    count++;
+		  }
+		  return r;
+		}
 
 
 		/*
 		** convert an hexadecimal numeric string to a number, following
 		** C99 specification for 'strtod'
 		*/
-//		private static lua_Number lua_strx2number (const char *s, char **endptr) {
-//		  lua_Number r = 0.0;
-//		  int e = 0, i = 0;
-//		  int neg = 0;  /* 1 if number is negative */
-//		  *endptr = cast(char *, s);  /* nothing is valid yet */
-//		  while (lisspace(cast_uchar(*s))) s++;  /* skip initial spaces */
-//		  neg = isneg(&s);  /* check signal */
-//		  if (!(*s == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X')))  /* check '0x' */
-//		    return 0.0;  /* invalid format (no '0x') */
-//		  s += 2;  /* skip '0x' */
-//		  r = readhexa(&s, r, &i);  /* read integer part */
-//		  if (*s == '.') {
-//		    s++;  /* skip dot */
-//		    r = readhexa(&s, r, &e);  /* read fractional part */
-//		  }
-//		  if (i == 0 && e == 0)
-//		    return 0.0;  /* invalid format (no digit) */
-//		  e *= -4;  /* each fractional digit divides value by 2^-4 */
-//		  *endptr = cast(char *, s);  /* valid up to here */
-//		  if (*s == 'p' || *s == 'P') {  /* exponent part? */
-//		    int exp1 = 0;
-//		    int neg1;
-//		    s++;  /* skip 'p' */
-//		    neg1 = isneg(&s);  /* signal */
-//		    if (!lisdigit(cast_uchar(*s)))
-//		      goto ret;  /* must have at least one digit */
-//		    while (lisdigit(cast_uchar(*s)))  /* read exponent */
-//		      exp1 = exp1 * 10 + *(s++) - '0';
-//		    if (neg1) exp1 = -exp1;
-//		    e += exp1;
-//		  }
-//		  *endptr = cast(char *, s);  /* valid up to here */
-//		 ret:
-//		  if (neg) r = -r;
-//		  return ldexp(r, e);
-//		}
-//
+		private static lua_Number lua_strx2number (CharPtr s, out CharPtr endptr) {
+		  lua_Number r = 0.0;
+		  int e = 0, i = 0;
+		  int neg = 0;  /* 1 if number is negative */
+		  endptr = (CharPtr)(s);  /* nothing is valid yet */
+		  while (lisspace(cast_uchar(s[0])) != 0) s.inc();  /* skip initial spaces */
+		  neg = isneg(ref s);  /* check signal */
+		  if (!(s[0] == '0' && (s[0 + 1] == 'x' || s[0 + 1] == 'X')))  /* check '0x' */
+		    return 0.0;  /* invalid format (no '0x') */
+		  s += 2;  /* skip '0x' */
+		  r = readhexa(ref s, r, ref i);  /* read integer part */
+		  if (s[0] == '.') {
+		  	s.inc();  /* skip dot */
+		    r = readhexa(ref s, r, ref e);  /* read fractional part */
+		  }
+		  if (i == 0 && e == 0)
+		    return 0.0;  /* invalid format (no digit) */
+		  e *= -4;  /* each fractional digit divides value by 2^-4 */
+		  endptr = (CharPtr)(s);  /* valid up to here */
+		  if (s[0] == 'p' || s[0] == 'P') {  /* exponent part? */
+		    int exp1 = 0;
+		    int neg1;
+		    s.inc();  /* skip 'p' */
+		    neg1 = isneg(ref s);  /* signal */
+		    if (0 == lisdigit(cast_uchar(s[0])))
+		      goto ret;  /* must have at least one digit */
+		    while (lisdigit(cast_uchar(s[0])) != 0) {  /* read exponent */
+		      exp1 = exp1 * 10 + s[0] - '0'; s.inc();
+		    }
+		    if (neg1 != 0) exp1 = -exp1;
+		    e += exp1;
+		  }
+		  endptr = (CharPtr)(s);  /* valid up to here */
+		 ret:
+		  if (neg != 0) r = -r;
+		  return ldexp(r, e);
+		}
+
 //		#endif
 
 
 
 
 ------->>>>>
 
 //		#if !defined(lua_strx2number)

//		#include <math.h>


		private static int isneg (ref CharPtr s) {
		  if (s[0] == '-') { s.inc(); return 1; }
		  else if (s[0] == '+') s.inc();
		  return 0;
		}


		private static lua_Number readhexa (ref CharPtr s, lua_Number r, ref int count) {
		  for (; lisxdigit(cast_uchar(s[0])) != 0; s.inc()) {  /* read integer part */
			r = (r * 16.0) + cast_num(luaO_hexavalue(cast_uchar(s[0])));
		    count++;
		  }
		  return r;
		}


		/*
		** convert an hexadecimal numeric string to a number, following
		** C99 specification for 'strtod'
		*/
		private static lua_Number lua_strx2number (CharPtr s, out CharPtr endptr) {
		  lua_Number r = 0.0;
		  int e = 0, i = 0;
		  int neg = 0;  /* 1 if number is negative */
		  endptr = (CharPtr)(s);  /* nothing is valid yet */
		  while (lisspace(cast_uchar(s[0])) != 0) s.inc();  /* skip initial spaces */
		  neg = isneg(ref s);  /* check signal */
		  if (!(s[0] == '0' && (s[0 + 1] == 'x' || s[0 + 1] == 'X')))  /* check '0x' */
		    return 0.0;  /* invalid format (no '0x') */
		  s += 2;  /* skip '0x' */
		  r = readhexa(ref s, r, ref i);  /* read integer part */
		  if (s[0] == '.') {
		  	s.inc();  /* skip dot */
		    r = readhexa(ref s, r, ref e);  /* read fractional part */
		  }
		  if (i == 0 && e == 0)
		    return 0.0;  /* invalid format (no digit) */
		  e *= -4;  /* each fractional digit divides value by 2^-4 */
		  endptr = (CharPtr)(s);  /* valid up to here */
		  if (s[0] == 'p' || s[0] == 'P') {  /* exponent part? */
		    int exp1 = 0;
		    int neg1;
		    s.inc();  /* skip 'p' */
		    neg1 = isneg(ref s);  /* signal */
		    if (0 == lisdigit(cast_uchar(s[0])))
		      goto ret;  /* must have at least one digit */
		    while (lisdigit(cast_uchar(s[0])) != 0) {  /* read exponent */
		      exp1 = exp1 * 10 + s[0] - '0'; s.inc();
		    }
		    if (neg1 != 0) exp1 = -exp1;
		    e += exp1;
		  }
		  endptr = (CharPtr)(s);  /* valid up to here */
		 ret:
		  if (neg != 0) r = -r;
		  return ldexp(r, e);
		}

//		#endif



----------->>>>>>>>>>>>

r = (r * 16.0) + cast_num(luaO_hexavalue(s[0] & 0xff));
->
r = (r * 16.0) + cast_num(luaO_hexavalue(cast_uchar(s[0]))); s.inc();
 
 (c)
ltablib.c 
  
 		public static int luaopen_table (lua_State L) {
 		  luaL_newlib(L, tab_funcs);
-#if LUA_COMPAT_UNPACK
+//#if LUA_COMPAT_UNPACK
 		  /* _G.unpack = table.unpack */
 		  lua_getfield(L, -1, "unpack");
 		  lua_setglobal(L, "unpack");
-#endif
+//#endif
 		  return 1;
 		}
 
 	}
 }


(d)
 		** provide its own implementation.
 		*/
 		public static double lua_str2number(CharPtr s, out CharPtr p) { return strtod(s, out p); }
 
 //#if defined(LUA_USE_STRTODHEX)
-		public static double lua_strx2number(CharPtr s, out CharPtr p) { return strtod(s, out p); }
+//		public static double lua_strx2number(CharPtr s, out CharPtr p) { return strtod(s, out p); }
 //#endif
 
 
 		/*
 		@@ The luai_num* macros define the primitive operations over numbers.

--------------------
(e) (for 5.2.0-beta) Error: FFT data length is not a power of 2
> return 3 == 4
true

		public static int GETARG_A(Instruction i)
		{

solve:

			case OpCode.OP_EQ: {
				TValue rb = RKB(L, base_, i, k);
				TValue rc = RKC(L, base_, i, k);
				//Protect(
				  if ((int)(equalobj(L, rb, rc)?1:0) == GETARG_A(i))
---->
				  if ((equalobj(L, rb, rc)?1:0) != GETARG_A(i))

------------------
(f) for lua 5.2.0 alpha

		private static void new_localvar (LexState ls, TString name) {
		  FuncState fs = ls.fs;
Varlist is struct, not effect------>		  Varlist vl = ls.varl;
		  int reg = registerlocalvar(ls, name);
		  checklimit(fs, vl.nactvar + 1 - fs.firstlocal,
		                  MAXVARS, "local variables");
		  luaM_growvector<vardesc>(ls.L, ref vl.actvar, vl.nactvar + 1,
		                  ref vl.actvarsize/*, vardesc*/, Int32.MaxValue, "local variables");
		  vl.actvar[vl.nactvar++].idx = (ushort)(reg);
		  

solve:

struct Varlist {
->
class Varlist {


(g) for lua 5.2.0 alpha

		public static int luaO_str2d (CharPtr s, out lua_Number result) {
		  CharPtr endptr;
		  result = lua_str2number(s, out endptr);
		  if (checkend(s, endptr)!=0) return 1;  /* conversion OK? */
---------->		  result = cast_num(strtoul(s, out endptr, 0)); /* try hexadecimal */
		  return checkend(s, endptr);
		}

strtoul(s, out endptr, 0   <------if base is 0, calc base


solve:

		public static ulong strtoul(CharPtr s, out CharPtr end, int base_)
		{
			bool is_base_zero = false;
			if (base_ == 0)
			{
				is_base_zero = true;
				base_ = 10;
			}
			try
			{
				end = new CharPtr(s.chars, s.index);

				// skip over any leading whitespace
				while (end[0] == ' ')
					end = end.next();

				// ignore any leading 0x
				if ((end[0] == '0') && (end[1] == 'x')) {
					end = end.next().next(); 
					if (is_base_zero) base_ = 16;
				} else if ((end[0] == '0') && (end[1] == 'X')) {
					end = end.next().next();
					if (is_base_zero) base_ = 16;
				}

				// do we have a leading + or - sign?
				bool negate = false;
				if (end[0] == '+')
					end = end.next();
				else if (end[0] == '-')
				{
					negate = true;
					end = end.next();
				}

				// loop through all chars
				bool invalid = false;
				bool had_digits = false;
				ulong result = 0;
				while (true)
				{
					// get this char
					char ch = end[0];					

					// which digit is this?
					int this_digit = 0;
					if (isdigit(ch))
						this_digit = ch - '0';
					else if (isalpha(ch))
						this_digit = tolower(ch) - 'a' + 10;
					else
						break;

					// is this digit valid?
					if (this_digit >= base_)
						invalid = true;
					else
					{
						had_digits = true;
						result = result * (ulong)base_ + (ulong)this_digit;
					}

					end = end.next();
				}

				// were any of the digits invalid?
				if (invalid || (!had_digits))
				{
					end = s;
					return System.UInt64.MaxValue;
				}

				// if the value was a negative then negate it here
				if (negate)
					result = (ulong)-(long)result;

				// ok, we're done
				return (ulong)result;
			}
			catch
			{
				end = s;
				return 0;
			}
		}


----
solve 2:

public static lua_Number cast_num(bool i) { return i ? (lua_Number)1 : (lua_Number)0; }
+ public static lua_Number cast_num(ulong i) { return (lua_Number)i; }
		
		
(h) for lua-5.2.0-20100206

		public static Closure luaF_newLclosure (lua_State L, int n, Table e) {
		  Closure c = luaC_newobj<Closure>(L, LUA_TFUNCTION, sizeLclosure(n), null, 0).cl;
		  c.l.isC = 0;
		  c.l.env = e;
		  c.l.nupvalues = cast_byte(n);
		  c.l.upvals = new UpVal[n];
		  for (int i = 0; i < n; i++)
			  c.l.upvals[i] = new UpVal(); //FIXME:???
n over upvals[]---------->		  while (n > 0) c.l.upvals[n] = null;
		  return c;
		}
		
solve:

		public static Closure luaF_newLclosure (lua_State L, Proto p) {
          int n = p.sizeupvalues;
		  Closure c = luaC_newobj<Closure>(L, LUA_TFUNCTION, sizeLclosure(n), null, 0).cl;
		  c.l.isC = 0;
		  c.l.p = p;
		  c.l.nupvalues = cast_byte(n);
		  c.l.upvals = new UpVal[n]; //FIXME:added???
		  /*
		  for (int i = 0; i < n; i++) //FIXME:added???
			  c.l.upvals[i] = new UpVal(); //FIXME:??? //FIXME:added???
		  while (n > 0) c.l.upvals[n] = null; //FIXME:added??? while (n--) c->l.upvals[n] = NULL;
		  */
		  while (n-- != 0) c.l.upvals[n] = null;
		  return c;
		}
		
(i) for lua-5.2.0-2007

o is null----------> public static UpVal ngcotouv(GCObject o) {return (UpVal)check_exp((o == null) || (o.gch.tt == LUA_TUPVAL), o.uv); }
		

solve:

public static UpVal luaF_findupval (lua_State L, StkId level) {
		  global_State g = G(L);
		  GCObjectRef pp = new OpenValRef(L);
		  UpVal p;
		  UpVal uv;
		  while ((p = ngcotouv(pp.get())) != null && p.v >= level) {
			lua_assert(p.v != p.u.value);
			if (p.v == level) {  /* found a corresponding upvalue? */
			  if (isdead(g, obj2gco(p)))  /* is it dead? */
				changewhite(obj2gco(p));  /* ressurect it */
			  return p;
			}
			pp = new NextRef(p);
		  }
		  
->
public static UpVal luaF_findupval (lua_State L, StkId level) {
		  global_State g = G(L);
		  GCObjectRef pp = new OpenValRef(L);
		  UpVal p;
		  UpVal uv;
+		  while (pp.get() != null && (p = ngcotouv(pp.get())) != null && p.v >= level) {
			lua_assert(p.v != p.u.value);
			if (p.v == level) {  /* found a corresponding upvalue? */
			  if (isdead(g, obj2gco(p)))  /* is it dead? */
				changewhite(obj2gco(p));  /* ressurect it */
			  return p;
			}
			pp = new NextRef(p);
		  }
		  
		  
(j) ???? for lua-5.2.0-20090702, lua-5.2.0-20100206

lua:359: attempt to index global 'io' (a nil value)
stack traceback:
        scimark.lua:359: in function 'printf'
        scimark.lua:387: in main chunk
        [C]: in ?
        
        
				  		
----------------------
(y) lua-5.1.4  
(y) lua-5.1.5  
(y) lua-5.2.0-2007 
(y) lua-5.2.0-20071029  
(y) lua-5.2.0-2008  
(y) lua-5.2.0-2009  
(???) lua-5.2.0-20090702
(???) lua-5.2.0-20100206  
(y) lua-5.2.0-alpha  
(y) lua-5.2.0-beta
(y) lua-5.2.0
----------------------


